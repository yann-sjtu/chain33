// Code generated by protoc-gen-go. DO NOT EDIT.
// source: blockchain.proto

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 区块头信息
// 	 version : 版本信息
// 	 parentHash :父哈希
// 	 txHash : 交易根哈希
// 	 stateHash :状态哈希
// 	 height : 区块高度
// 	 blockTime :区块产生时的时标
// 	 txCount : 区块上所有交易个数
// 	 difficulty :区块难度系数，
// 	 signature :交易签名
type Header struct {
	Version    int64      `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	ParentHash []byte     `protobuf:"bytes,2,opt,name=parentHash,proto3" json:"parentHash,omitempty"`
	TxHash     []byte     `protobuf:"bytes,3,opt,name=txHash,proto3" json:"txHash,omitempty"`
	StateHash  []byte     `protobuf:"bytes,4,opt,name=stateHash,proto3" json:"stateHash,omitempty"`
	Height     int64      `protobuf:"varint,5,opt,name=height" json:"height,omitempty"`
	BlockTime  int64      `protobuf:"varint,6,opt,name=blockTime" json:"blockTime,omitempty"`
	TxCount    int64      `protobuf:"varint,9,opt,name=txCount" json:"txCount,omitempty"`
	Hash       []byte     `protobuf:"bytes,10,opt,name=hash,proto3" json:"hash,omitempty"`
	Difficulty uint32     `protobuf:"varint,11,opt,name=difficulty" json:"difficulty,omitempty"`
	Signature  *Signature `protobuf:"bytes,8,opt,name=signature" json:"signature,omitempty"`
}

func (m *Header) Reset()                    { *m = Header{} }
func (m *Header) String() string            { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()               {}
func (*Header) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Header) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Header) GetParentHash() []byte {
	if m != nil {
		return m.ParentHash
	}
	return nil
}

func (m *Header) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *Header) GetStateHash() []byte {
	if m != nil {
		return m.StateHash
	}
	return nil
}

func (m *Header) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Header) GetBlockTime() int64 {
	if m != nil {
		return m.BlockTime
	}
	return 0
}

func (m *Header) GetTxCount() int64 {
	if m != nil {
		return m.TxCount
	}
	return 0
}

func (m *Header) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *Header) GetDifficulty() uint32 {
	if m != nil {
		return m.Difficulty
	}
	return 0
}

func (m *Header) GetSignature() *Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

//  参考Header解释
// mainHash 平行链上使用的字段，代表这个区块的主链hash
type Block struct {
	Version    int64          `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	ParentHash []byte         `protobuf:"bytes,2,opt,name=parentHash,proto3" json:"parentHash,omitempty"`
	TxHash     []byte         `protobuf:"bytes,3,opt,name=txHash,proto3" json:"txHash,omitempty"`
	StateHash  []byte         `protobuf:"bytes,4,opt,name=stateHash,proto3" json:"stateHash,omitempty"`
	Height     int64          `protobuf:"varint,5,opt,name=height" json:"height,omitempty"`
	BlockTime  int64          `protobuf:"varint,6,opt,name=blockTime" json:"blockTime,omitempty"`
	Difficulty uint32         `protobuf:"varint,11,opt,name=difficulty" json:"difficulty,omitempty"`
	MainHash   []byte         `protobuf:"bytes,12,opt,name=mainHash,proto3" json:"mainHash,omitempty"`
	MainHeight int64          `protobuf:"varint,13,opt,name=mainHeight" json:"mainHeight,omitempty"`
	Signature  *Signature     `protobuf:"bytes,8,opt,name=signature" json:"signature,omitempty"`
	Txs        []*Transaction `protobuf:"bytes,7,rep,name=txs" json:"txs,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Block) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Block) GetParentHash() []byte {
	if m != nil {
		return m.ParentHash
	}
	return nil
}

func (m *Block) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *Block) GetStateHash() []byte {
	if m != nil {
		return m.StateHash
	}
	return nil
}

func (m *Block) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Block) GetBlockTime() int64 {
	if m != nil {
		return m.BlockTime
	}
	return 0
}

func (m *Block) GetDifficulty() uint32 {
	if m != nil {
		return m.Difficulty
	}
	return 0
}

func (m *Block) GetMainHash() []byte {
	if m != nil {
		return m.MainHash
	}
	return nil
}

func (m *Block) GetMainHeight() int64 {
	if m != nil {
		return m.MainHeight
	}
	return 0
}

func (m *Block) GetSignature() *Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Block) GetTxs() []*Transaction {
	if m != nil {
		return m.Txs
	}
	return nil
}

type Blocks struct {
	Items []*Block `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *Blocks) Reset()                    { *m = Blocks{} }
func (m *Blocks) String() string            { return proto.CompactTextString(m) }
func (*Blocks) ProtoMessage()               {}
func (*Blocks) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *Blocks) GetItems() []*Block {
	if m != nil {
		return m.Items
	}
	return nil
}

type BlockSeqCB struct {
	Name          string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	URL           string `protobuf:"bytes,2,opt,name=URL" json:"URL,omitempty"`
	Encode        string `protobuf:"bytes,3,opt,name=encode" json:"encode,omitempty"`
	IsHeader      bool   `protobuf:"varint,4,opt,name=isHeader" json:"isHeader,omitempty"`
	LastSequence  int64  `protobuf:"varint,5,opt,name=lastSequence" json:"lastSequence,omitempty"`
	LastHeight    int64  `protobuf:"varint,6,opt,name=lastHeight" json:"lastHeight,omitempty"`
	LastBlockHash string `protobuf:"bytes,7,opt,name=lastBlockHash" json:"lastBlockHash,omitempty"`
}

func (m *BlockSeqCB) Reset()                    { *m = BlockSeqCB{} }
func (m *BlockSeqCB) String() string            { return proto.CompactTextString(m) }
func (*BlockSeqCB) ProtoMessage()               {}
func (*BlockSeqCB) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *BlockSeqCB) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BlockSeqCB) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *BlockSeqCB) GetEncode() string {
	if m != nil {
		return m.Encode
	}
	return ""
}

func (m *BlockSeqCB) GetIsHeader() bool {
	if m != nil {
		return m.IsHeader
	}
	return false
}

func (m *BlockSeqCB) GetLastSequence() int64 {
	if m != nil {
		return m.LastSequence
	}
	return 0
}

func (m *BlockSeqCB) GetLastHeight() int64 {
	if m != nil {
		return m.LastHeight
	}
	return 0
}

func (m *BlockSeqCB) GetLastBlockHash() string {
	if m != nil {
		return m.LastBlockHash
	}
	return ""
}

type BlockSeqCBs struct {
	Items []*BlockSeqCB `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *BlockSeqCBs) Reset()                    { *m = BlockSeqCBs{} }
func (m *BlockSeqCBs) String() string            { return proto.CompactTextString(m) }
func (*BlockSeqCBs) ProtoMessage()               {}
func (*BlockSeqCBs) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *BlockSeqCBs) GetItems() []*BlockSeqCB {
	if m != nil {
		return m.Items
	}
	return nil
}

type BlockSeq struct {
	Num    int64          `protobuf:"varint,1,opt,name=num" json:"num,omitempty"`
	Seq    *BlockSequence `protobuf:"bytes,2,opt,name=seq" json:"seq,omitempty"`
	Detail *BlockDetail   `protobuf:"bytes,3,opt,name=detail" json:"detail,omitempty"`
}

func (m *BlockSeq) Reset()                    { *m = BlockSeq{} }
func (m *BlockSeq) String() string            { return proto.CompactTextString(m) }
func (*BlockSeq) ProtoMessage()               {}
func (*BlockSeq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *BlockSeq) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *BlockSeq) GetSeq() *BlockSequence {
	if m != nil {
		return m.Seq
	}
	return nil
}

func (m *BlockSeq) GetDetail() *BlockDetail {
	if m != nil {
		return m.Detail
	}
	return nil
}

type BlockSeqs struct {
	Seqs []*BlockSeq `protobuf:"bytes,1,rep,name=seqs" json:"seqs,omitempty"`
}

func (m *BlockSeqs) Reset()                    { *m = BlockSeqs{} }
func (m *BlockSeqs) String() string            { return proto.CompactTextString(m) }
func (*BlockSeqs) ProtoMessage()               {}
func (*BlockSeqs) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *BlockSeqs) GetSeqs() []*BlockSeq {
	if m != nil {
		return m.Seqs
	}
	return nil
}

// 节点ID以及对应的Block
type BlockPid struct {
	Pid   string `protobuf:"bytes,1,opt,name=pid" json:"pid,omitempty"`
	Block *Block `protobuf:"bytes,2,opt,name=block" json:"block,omitempty"`
}

func (m *BlockPid) Reset()                    { *m = BlockPid{} }
func (m *BlockPid) String() string            { return proto.CompactTextString(m) }
func (*BlockPid) ProtoMessage()               {}
func (*BlockPid) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *BlockPid) GetPid() string {
	if m != nil {
		return m.Pid
	}
	return ""
}

func (m *BlockPid) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

// resp
type BlockDetails struct {
	Items []*BlockDetail `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *BlockDetails) Reset()                    { *m = BlockDetails{} }
func (m *BlockDetails) String() string            { return proto.CompactTextString(m) }
func (*BlockDetails) ProtoMessage()               {}
func (*BlockDetails) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *BlockDetails) GetItems() []*BlockDetail {
	if m != nil {
		return m.Items
	}
	return nil
}

// resp
type Headers struct {
	Items []*Header `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *Headers) Reset()                    { *m = Headers{} }
func (m *Headers) String() string            { return proto.CompactTextString(m) }
func (*Headers) ProtoMessage()               {}
func (*Headers) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *Headers) GetItems() []*Header {
	if m != nil {
		return m.Items
	}
	return nil
}

type HeadersPid struct {
	Pid     string   `protobuf:"bytes,1,opt,name=pid" json:"pid,omitempty"`
	Headers *Headers `protobuf:"bytes,2,opt,name=headers" json:"headers,omitempty"`
}

func (m *HeadersPid) Reset()                    { *m = HeadersPid{} }
func (m *HeadersPid) String() string            { return proto.CompactTextString(m) }
func (*HeadersPid) ProtoMessage()               {}
func (*HeadersPid) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *HeadersPid) GetPid() string {
	if m != nil {
		return m.Pid
	}
	return ""
}

func (m *HeadersPid) GetHeaders() *Headers {
	if m != nil {
		return m.Headers
	}
	return nil
}

// 区块视图
// 	 head : 区块头信息
// 	 txCount :区块上交易个数
// 	 txHashes : 区块上交易的哈希列表
type BlockOverview struct {
	Head     *Header  `protobuf:"bytes,1,opt,name=head" json:"head,omitempty"`
	TxCount  int64    `protobuf:"varint,2,opt,name=txCount" json:"txCount,omitempty"`
	TxHashes [][]byte `protobuf:"bytes,3,rep,name=txHashes,proto3" json:"txHashes,omitempty"`
}

func (m *BlockOverview) Reset()                    { *m = BlockOverview{} }
func (m *BlockOverview) String() string            { return proto.CompactTextString(m) }
func (*BlockOverview) ProtoMessage()               {}
func (*BlockOverview) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *BlockOverview) GetHead() *Header {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *BlockOverview) GetTxCount() int64 {
	if m != nil {
		return m.TxCount
	}
	return 0
}

func (m *BlockOverview) GetTxHashes() [][]byte {
	if m != nil {
		return m.TxHashes
	}
	return nil
}

// 区块详细信息
// 	 block : 区块信息
// 	 receipts :区块上所有交易的收据信息列表
type BlockDetail struct {
	Block          *Block         `protobuf:"bytes,1,opt,name=block" json:"block,omitempty"`
	Receipts       []*ReceiptData `protobuf:"bytes,2,rep,name=receipts" json:"receipts,omitempty"`
	KV             []*KeyValue    `protobuf:"bytes,3,rep,name=KV" json:"KV,omitempty"`
	PrevStatusHash []byte         `protobuf:"bytes,4,opt,name=prevStatusHash,proto3" json:"prevStatusHash,omitempty"`
}

func (m *BlockDetail) Reset()                    { *m = BlockDetail{} }
func (m *BlockDetail) String() string            { return proto.CompactTextString(m) }
func (*BlockDetail) ProtoMessage()               {}
func (*BlockDetail) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

func (m *BlockDetail) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *BlockDetail) GetReceipts() []*ReceiptData {
	if m != nil {
		return m.Receipts
	}
	return nil
}

func (m *BlockDetail) GetKV() []*KeyValue {
	if m != nil {
		return m.KV
	}
	return nil
}

func (m *BlockDetail) GetPrevStatusHash() []byte {
	if m != nil {
		return m.PrevStatusHash
	}
	return nil
}

type Receipts struct {
	Receipts []*Receipt `protobuf:"bytes,1,rep,name=receipts" json:"receipts,omitempty"`
}

func (m *Receipts) Reset()                    { *m = Receipts{} }
func (m *Receipts) String() string            { return proto.CompactTextString(m) }
func (*Receipts) ProtoMessage()               {}
func (*Receipts) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func (m *Receipts) GetReceipts() []*Receipt {
	if m != nil {
		return m.Receipts
	}
	return nil
}

type ReceiptCheckTxList struct {
	Errs []string `protobuf:"bytes,1,rep,name=errs" json:"errs,omitempty"`
}

func (m *ReceiptCheckTxList) Reset()                    { *m = ReceiptCheckTxList{} }
func (m *ReceiptCheckTxList) String() string            { return proto.CompactTextString(m) }
func (*ReceiptCheckTxList) ProtoMessage()               {}
func (*ReceiptCheckTxList) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

func (m *ReceiptCheckTxList) GetErrs() []string {
	if m != nil {
		return m.Errs
	}
	return nil
}

// 区块链状态
// 	 currentHeight : 区块最新高度
// 	 mempoolSize :内存池大小
// 	 msgQueueSize : 消息队列大小
type ChainStatus struct {
	CurrentHeight int64 `protobuf:"varint,1,opt,name=currentHeight" json:"currentHeight,omitempty"`
	MempoolSize   int64 `protobuf:"varint,2,opt,name=mempoolSize" json:"mempoolSize,omitempty"`
	MsgQueueSize  int64 `protobuf:"varint,3,opt,name=msgQueueSize" json:"msgQueueSize,omitempty"`
}

func (m *ChainStatus) Reset()                    { *m = ChainStatus{} }
func (m *ChainStatus) String() string            { return proto.CompactTextString(m) }
func (*ChainStatus) ProtoMessage()               {}
func (*ChainStatus) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{15} }

func (m *ChainStatus) GetCurrentHeight() int64 {
	if m != nil {
		return m.CurrentHeight
	}
	return 0
}

func (m *ChainStatus) GetMempoolSize() int64 {
	if m != nil {
		return m.MempoolSize
	}
	return 0
}

func (m *ChainStatus) GetMsgQueueSize() int64 {
	if m != nil {
		return m.MsgQueueSize
	}
	return 0
}

// 获取区块信息
// 	 start : 获取区块的开始高度
// 	 end :获取区块的结束高度
// 	 Isdetail : 是否需要获取区块的详细信息
// 	 pid : peer列表
type ReqBlocks struct {
	Start    int64    `protobuf:"varint,1,opt,name=start" json:"start,omitempty"`
	End      int64    `protobuf:"varint,2,opt,name=end" json:"end,omitempty"`
	IsDetail bool     `protobuf:"varint,3,opt,name=isDetail" json:"isDetail,omitempty"`
	Pid      []string `protobuf:"bytes,4,rep,name=pid" json:"pid,omitempty"`
}

func (m *ReqBlocks) Reset()                    { *m = ReqBlocks{} }
func (m *ReqBlocks) String() string            { return proto.CompactTextString(m) }
func (*ReqBlocks) ProtoMessage()               {}
func (*ReqBlocks) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{16} }

func (m *ReqBlocks) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *ReqBlocks) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *ReqBlocks) GetIsDetail() bool {
	if m != nil {
		return m.IsDetail
	}
	return false
}

func (m *ReqBlocks) GetPid() []string {
	if m != nil {
		return m.Pid
	}
	return nil
}

type MempoolSize struct {
	Size int64 `protobuf:"varint,1,opt,name=size" json:"size,omitempty"`
}

func (m *MempoolSize) Reset()                    { *m = MempoolSize{} }
func (m *MempoolSize) String() string            { return proto.CompactTextString(m) }
func (*MempoolSize) ProtoMessage()               {}
func (*MempoolSize) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{17} }

func (m *MempoolSize) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

type ReplyBlockHeight struct {
	Height int64 `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
}

func (m *ReplyBlockHeight) Reset()                    { *m = ReplyBlockHeight{} }
func (m *ReplyBlockHeight) String() string            { return proto.CompactTextString(m) }
func (*ReplyBlockHeight) ProtoMessage()               {}
func (*ReplyBlockHeight) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{18} }

func (m *ReplyBlockHeight) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// 区块体信息
// 	 txs : 区块上所有交易列表
// 	 receipts :区块上所有交易的收据信息列表
// 	 mainHash : 主链区块hash，平行链使用
// 	 mainHeight :主链区块高度，平行链使用
// 	 hash : 本链区块hash
// 	 height :本链区块高度
type BlockBody struct {
	Txs        []*Transaction `protobuf:"bytes,1,rep,name=txs" json:"txs,omitempty"`
	Receipts   []*ReceiptData `protobuf:"bytes,2,rep,name=receipts" json:"receipts,omitempty"`
	MainHash   []byte         `protobuf:"bytes,3,opt,name=mainHash,proto3" json:"mainHash,omitempty"`
	MainHeight int64          `protobuf:"varint,4,opt,name=mainHeight" json:"mainHeight,omitempty"`
	Hash       []byte         `protobuf:"bytes,5,opt,name=hash,proto3" json:"hash,omitempty"`
	Height     int64          `protobuf:"varint,6,opt,name=height" json:"height,omitempty"`
}

func (m *BlockBody) Reset()                    { *m = BlockBody{} }
func (m *BlockBody) String() string            { return proto.CompactTextString(m) }
func (*BlockBody) ProtoMessage()               {}
func (*BlockBody) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{19} }

func (m *BlockBody) GetTxs() []*Transaction {
	if m != nil {
		return m.Txs
	}
	return nil
}

func (m *BlockBody) GetReceipts() []*ReceiptData {
	if m != nil {
		return m.Receipts
	}
	return nil
}

func (m *BlockBody) GetMainHash() []byte {
	if m != nil {
		return m.MainHash
	}
	return nil
}

func (m *BlockBody) GetMainHeight() int64 {
	if m != nil {
		return m.MainHeight
	}
	return 0
}

func (m *BlockBody) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *BlockBody) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// 区块回执
// 	 receipts :区块上所有交易的收据信息列表
// 	 hash : 本链区块hash
// 	 height :本链区块高度
type BlockReceipt struct {
	Receipts []*ReceiptData `protobuf:"bytes,1,rep,name=receipts" json:"receipts,omitempty"`
	Hash     []byte         `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Height   int64          `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
}

func (m *BlockReceipt) Reset()                    { *m = BlockReceipt{} }
func (m *BlockReceipt) String() string            { return proto.CompactTextString(m) }
func (*BlockReceipt) ProtoMessage()               {}
func (*BlockReceipt) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{20} }

func (m *BlockReceipt) GetReceipts() []*ReceiptData {
	if m != nil {
		return m.Receipts
	}
	return nil
}

func (m *BlockReceipt) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *BlockReceipt) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

//  区块追赶主链状态，用于判断本节点区块是否已经同步好
type IsCaughtUp struct {
	Iscaughtup bool `protobuf:"varint,1,opt,name=Iscaughtup" json:"Iscaughtup,omitempty"`
}

func (m *IsCaughtUp) Reset()                    { *m = IsCaughtUp{} }
func (m *IsCaughtUp) String() string            { return proto.CompactTextString(m) }
func (*IsCaughtUp) ProtoMessage()               {}
func (*IsCaughtUp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{21} }

func (m *IsCaughtUp) GetIscaughtup() bool {
	if m != nil {
		return m.Iscaughtup
	}
	return false
}

//  ntp时钟状态
type IsNtpClockSync struct {
	Isntpclocksync bool `protobuf:"varint,1,opt,name=isntpclocksync" json:"isntpclocksync,omitempty"`
}

func (m *IsNtpClockSync) Reset()                    { *m = IsNtpClockSync{} }
func (m *IsNtpClockSync) String() string            { return proto.CompactTextString(m) }
func (*IsNtpClockSync) ProtoMessage()               {}
func (*IsNtpClockSync) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{22} }

func (m *IsNtpClockSync) GetIsntpclocksync() bool {
	if m != nil {
		return m.Isntpclocksync
	}
	return false
}

type ChainExecutor struct {
	Driver    string `protobuf:"bytes,1,opt,name=driver" json:"driver,omitempty"`
	FuncName  string `protobuf:"bytes,2,opt,name=funcName" json:"funcName,omitempty"`
	StateHash []byte `protobuf:"bytes,3,opt,name=stateHash,proto3" json:"stateHash,omitempty"`
	Param     []byte `protobuf:"bytes,4,opt,name=param,proto3" json:"param,omitempty"`
	// 扩展字段，用于额外的用途
	Extra []byte `protobuf:"bytes,5,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (m *ChainExecutor) Reset()                    { *m = ChainExecutor{} }
func (m *ChainExecutor) String() string            { return proto.CompactTextString(m) }
func (*ChainExecutor) ProtoMessage()               {}
func (*ChainExecutor) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{23} }

func (m *ChainExecutor) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *ChainExecutor) GetFuncName() string {
	if m != nil {
		return m.FuncName
	}
	return ""
}

func (m *ChainExecutor) GetStateHash() []byte {
	if m != nil {
		return m.StateHash
	}
	return nil
}

func (m *ChainExecutor) GetParam() []byte {
	if m != nil {
		return m.Param
	}
	return nil
}

func (m *ChainExecutor) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

//  通过block hash记录block的操作类型及add/del：1/2
type BlockSequence struct {
	Hash []byte `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Type int64  `protobuf:"varint,2,opt,name=Type" json:"Type,omitempty"`
}

func (m *BlockSequence) Reset()                    { *m = BlockSequence{} }
func (m *BlockSequence) String() string            { return proto.CompactTextString(m) }
func (*BlockSequence) ProtoMessage()               {}
func (*BlockSequence) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{24} }

func (m *BlockSequence) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *BlockSequence) GetType() int64 {
	if m != nil {
		return m.Type
	}
	return 0
}

// resp
type BlockSequences struct {
	Items []*BlockSequence `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *BlockSequences) Reset()                    { *m = BlockSequences{} }
func (m *BlockSequences) String() string            { return proto.CompactTextString(m) }
func (*BlockSequences) ProtoMessage()               {}
func (*BlockSequences) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{25} }

func (m *BlockSequences) GetItems() []*BlockSequence {
	if m != nil {
		return m.Items
	}
	return nil
}

// AddSeqCallback 推荐的sequence 信息
type Sequence struct {
	Hash     []byte `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Type     int64  `protobuf:"varint,2,opt,name=Type" json:"Type,omitempty"`
	Sequence int64  `protobuf:"varint,3,opt,name=sequence" json:"sequence,omitempty"`
	Height   int64  `protobuf:"varint,4,opt,name=height" json:"height,omitempty"`
}

func (m *Sequence) Reset()                    { *m = Sequence{} }
func (m *Sequence) String() string            { return proto.CompactTextString(m) }
func (*Sequence) ProtoMessage()               {}
func (*Sequence) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{26} }

func (m *Sequence) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *Sequence) GetType() int64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Sequence) GetSequence() int64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *Sequence) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// Reply AddSeqCallback
type ReplyAddSeqCallback struct {
	IsOk bool        `protobuf:"varint,1,opt,name=isOk" json:"isOk,omitempty"`
	Msg  []byte      `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Seqs []*Sequence `protobuf:"bytes,3,rep,name=seqs" json:"seqs,omitempty"`
}

func (m *ReplyAddSeqCallback) Reset()                    { *m = ReplyAddSeqCallback{} }
func (m *ReplyAddSeqCallback) String() string            { return proto.CompactTextString(m) }
func (*ReplyAddSeqCallback) ProtoMessage()               {}
func (*ReplyAddSeqCallback) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{27} }

func (m *ReplyAddSeqCallback) GetIsOk() bool {
	if m != nil {
		return m.IsOk
	}
	return false
}

func (m *ReplyAddSeqCallback) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *ReplyAddSeqCallback) GetSeqs() []*Sequence {
	if m != nil {
		return m.Seqs
	}
	return nil
}

// 平行链区块详细信息
// 	 blockdetail : 区块详细信息
// 	 sequence :区块序列号
//   isSync:写数据库时是否需要刷盘
type ParaChainBlockDetail struct {
	Blockdetail *BlockDetail `protobuf:"bytes,1,opt,name=blockdetail" json:"blockdetail,omitempty"`
	Sequence    int64        `protobuf:"varint,2,opt,name=sequence" json:"sequence,omitempty"`
	IsSync      bool         `protobuf:"varint,3,opt,name=isSync" json:"isSync,omitempty"`
}

func (m *ParaChainBlockDetail) Reset()                    { *m = ParaChainBlockDetail{} }
func (m *ParaChainBlockDetail) String() string            { return proto.CompactTextString(m) }
func (*ParaChainBlockDetail) ProtoMessage()               {}
func (*ParaChainBlockDetail) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{28} }

func (m *ParaChainBlockDetail) GetBlockdetail() *BlockDetail {
	if m != nil {
		return m.Blockdetail
	}
	return nil
}

func (m *ParaChainBlockDetail) GetSequence() int64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *ParaChainBlockDetail) GetIsSync() bool {
	if m != nil {
		return m.IsSync
	}
	return false
}

// 定义para交易结构
type ParaTxDetails struct {
	Items []*ParaTxDetail `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *ParaTxDetails) Reset()                    { *m = ParaTxDetails{} }
func (m *ParaTxDetails) String() string            { return proto.CompactTextString(m) }
func (*ParaTxDetails) ProtoMessage()               {}
func (*ParaTxDetails) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{29} }

func (m *ParaTxDetails) GetItems() []*ParaTxDetail {
	if m != nil {
		return m.Items
	}
	return nil
}

// type:平行链交易所在区块add/del操作，方便平行链回滚
// header:平行链交易所在区块头信息
// txDetails:本区块中指定title平行链的所有交易
// proofs:对应平行链子roothash的存在证明路径
// childHash:此平行链交易的子roothash
// index:对应平行链子roothash在整个区块中的索引
type ParaTxDetail struct {
	Type      int64       `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Header    *Header     `protobuf:"bytes,2,opt,name=header" json:"header,omitempty"`
	TxDetails []*TxDetail `protobuf:"bytes,3,rep,name=txDetails" json:"txDetails,omitempty"`
	ChildHash []byte      `protobuf:"bytes,4,opt,name=childHash,proto3" json:"childHash,omitempty"`
	Index     uint32      `protobuf:"varint,5,opt,name=index" json:"index,omitempty"`
	Proofs    [][]byte    `protobuf:"bytes,6,rep,name=proofs,proto3" json:"proofs,omitempty"`
}

func (m *ParaTxDetail) Reset()                    { *m = ParaTxDetail{} }
func (m *ParaTxDetail) String() string            { return proto.CompactTextString(m) }
func (*ParaTxDetail) ProtoMessage()               {}
func (*ParaTxDetail) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{30} }

func (m *ParaTxDetail) GetType() int64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ParaTxDetail) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ParaTxDetail) GetTxDetails() []*TxDetail {
	if m != nil {
		return m.TxDetails
	}
	return nil
}

func (m *ParaTxDetail) GetChildHash() []byte {
	if m != nil {
		return m.ChildHash
	}
	return nil
}

func (m *ParaTxDetail) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ParaTxDetail) GetProofs() [][]byte {
	if m != nil {
		return m.Proofs
	}
	return nil
}

// 交易的详情：
// index:本交易在block中索引值，用于proof的证明
// tx:本交易内容
// receipt:本交易在主链的执行回执
// proofs:本交易hash在block中merkel中的路径
type TxDetail struct {
	Index   uint32       `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Tx      *Transaction `protobuf:"bytes,2,opt,name=tx" json:"tx,omitempty"`
	Receipt *ReceiptData `protobuf:"bytes,3,opt,name=receipt" json:"receipt,omitempty"`
	Proofs  [][]byte     `protobuf:"bytes,4,rep,name=proofs,proto3" json:"proofs,omitempty"`
}

func (m *TxDetail) Reset()                    { *m = TxDetail{} }
func (m *TxDetail) String() string            { return proto.CompactTextString(m) }
func (*TxDetail) ProtoMessage()               {}
func (*TxDetail) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{31} }

func (m *TxDetail) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *TxDetail) GetTx() *Transaction {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *TxDetail) GetReceipt() *ReceiptData {
	if m != nil {
		return m.Receipt
	}
	return nil
}

func (m *TxDetail) GetProofs() [][]byte {
	if m != nil {
		return m.Proofs
	}
	return nil
}

// 通过seq区间和title请求平行链的交易
type ReqParaTxByTitle struct {
	Start int64  `protobuf:"varint,1,opt,name=start" json:"start,omitempty"`
	End   int64  `protobuf:"varint,2,opt,name=end" json:"end,omitempty"`
	Title string `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	IsSeq bool   `protobuf:"varint,4,opt,name=isSeq" json:"isSeq,omitempty"`
}

func (m *ReqParaTxByTitle) Reset()                    { *m = ReqParaTxByTitle{} }
func (m *ReqParaTxByTitle) String() string            { return proto.CompactTextString(m) }
func (*ReqParaTxByTitle) ProtoMessage()               {}
func (*ReqParaTxByTitle) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{32} }

func (m *ReqParaTxByTitle) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *ReqParaTxByTitle) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *ReqParaTxByTitle) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ReqParaTxByTitle) GetIsSeq() bool {
	if m != nil {
		return m.IsSeq
	}
	return false
}

// 导出block文件头信息
type FileHeader struct {
	StartHeight int64  `protobuf:"varint,1,opt,name=startHeight" json:"startHeight,omitempty"`
	Driver      string `protobuf:"bytes,2,opt,name=driver" json:"driver,omitempty"`
	Title       string `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	TestNet     bool   `protobuf:"varint,4,opt,name=testNet" json:"testNet,omitempty"`
}

func (m *FileHeader) Reset()                    { *m = FileHeader{} }
func (m *FileHeader) String() string            { return proto.CompactTextString(m) }
func (*FileHeader) ProtoMessage()               {}
func (*FileHeader) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{33} }

func (m *FileHeader) GetStartHeight() int64 {
	if m != nil {
		return m.StartHeight
	}
	return 0
}

func (m *FileHeader) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *FileHeader) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *FileHeader) GetTestNet() bool {
	if m != nil {
		return m.TestNet
	}
	return false
}

// 存储block高度和hash
type EndBlock struct {
	Height int64  `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	Hash   []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *EndBlock) Reset()                    { *m = EndBlock{} }
func (m *EndBlock) String() string            { return proto.CompactTextString(m) }
func (*EndBlock) ProtoMessage()               {}
func (*EndBlock) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{34} }

func (m *EndBlock) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *EndBlock) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

// 通过seq获取区块的header信息
type HeaderSeq struct {
	Num    int64          `protobuf:"varint,1,opt,name=num" json:"num,omitempty"`
	Seq    *BlockSequence `protobuf:"bytes,2,opt,name=seq" json:"seq,omitempty"`
	Header *Header        `protobuf:"bytes,3,opt,name=header" json:"header,omitempty"`
}

func (m *HeaderSeq) Reset()                    { *m = HeaderSeq{} }
func (m *HeaderSeq) String() string            { return proto.CompactTextString(m) }
func (*HeaderSeq) ProtoMessage()               {}
func (*HeaderSeq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{35} }

func (m *HeaderSeq) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *HeaderSeq) GetSeq() *BlockSequence {
	if m != nil {
		return m.Seq
	}
	return nil
}

func (m *HeaderSeq) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

// 批量推送区块的header信息
type HeaderSeqs struct {
	Seqs []*HeaderSeq `protobuf:"bytes,1,rep,name=seqs" json:"seqs,omitempty"`
}

func (m *HeaderSeqs) Reset()                    { *m = HeaderSeqs{} }
func (m *HeaderSeqs) String() string            { return proto.CompactTextString(m) }
func (*HeaderSeqs) ProtoMessage()               {}
func (*HeaderSeqs) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{36} }

func (m *HeaderSeqs) GetSeqs() []*HeaderSeq {
	if m != nil {
		return m.Seqs
	}
	return nil
}

// 记录本平行链所在区块的信息以及子根hash值
// childHash:平行链子roothash值
// startIndex:此平行链的第一笔交易的index索引值
// childHashIndex:此平行链子roothash在本区块中的索引值
// txCount:此平行链交易的个数
type HeightPara struct {
	Height         int64  `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	Title          string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Hash           []byte `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	ChildHash      []byte `protobuf:"bytes,4,opt,name=childHash,proto3" json:"childHash,omitempty"`
	StartIndex     int32  `protobuf:"varint,5,opt,name=startIndex" json:"startIndex,omitempty"`
	ChildHashIndex uint32 `protobuf:"varint,6,opt,name=childHashIndex" json:"childHashIndex,omitempty"`
	TxCount        int32  `protobuf:"varint,7,opt,name=txCount" json:"txCount,omitempty"`
}

func (m *HeightPara) Reset()                    { *m = HeightPara{} }
func (m *HeightPara) String() string            { return proto.CompactTextString(m) }
func (*HeightPara) ProtoMessage()               {}
func (*HeightPara) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{37} }

func (m *HeightPara) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *HeightPara) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *HeightPara) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *HeightPara) GetChildHash() []byte {
	if m != nil {
		return m.ChildHash
	}
	return nil
}

func (m *HeightPara) GetStartIndex() int32 {
	if m != nil {
		return m.StartIndex
	}
	return 0
}

func (m *HeightPara) GetChildHashIndex() uint32 {
	if m != nil {
		return m.ChildHashIndex
	}
	return 0
}

func (m *HeightPara) GetTxCount() int32 {
	if m != nil {
		return m.TxCount
	}
	return 0
}

type HeightParas struct {
	Items []*HeightPara `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *HeightParas) Reset()                    { *m = HeightParas{} }
func (m *HeightParas) String() string            { return proto.CompactTextString(m) }
func (*HeightParas) ProtoMessage()               {}
func (*HeightParas) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{38} }

func (m *HeightParas) GetItems() []*HeightPara {
	if m != nil {
		return m.Items
	}
	return nil
}

// 记录平行链第一笔交易的index,以及平行链的roothash
// title:子链名字，主链的默认是main
// startIndex:子链第一笔交易的索引
// childHash:子链的根hash
// txCount:子链交易的数量
type ChildChain struct {
	Title      string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	StartIndex int32  `protobuf:"varint,2,opt,name=startIndex" json:"startIndex,omitempty"`
	ChildHash  []byte `protobuf:"bytes,3,opt,name=childHash,proto3" json:"childHash,omitempty"`
	TxCount    int32  `protobuf:"varint,4,opt,name=txCount" json:"txCount,omitempty"`
}

func (m *ChildChain) Reset()                    { *m = ChildChain{} }
func (m *ChildChain) String() string            { return proto.CompactTextString(m) }
func (*ChildChain) ProtoMessage()               {}
func (*ChildChain) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{39} }

func (m *ChildChain) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ChildChain) GetStartIndex() int32 {
	if m != nil {
		return m.StartIndex
	}
	return 0
}

func (m *ChildChain) GetChildHash() []byte {
	if m != nil {
		return m.ChildHash
	}
	return nil
}

func (m *ChildChain) GetTxCount() int32 {
	if m != nil {
		return m.TxCount
	}
	return 0
}

// 通过指定title以及height翻页获取拥有此title交易的区块高度列表
type ReqHeightByTitle struct {
	Height    int64  `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	Title     string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Count     int32  `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	Direction int32  `protobuf:"varint,4,opt,name=direction" json:"direction,omitempty"`
}

func (m *ReqHeightByTitle) Reset()                    { *m = ReqHeightByTitle{} }
func (m *ReqHeightByTitle) String() string            { return proto.CompactTextString(m) }
func (*ReqHeightByTitle) ProtoMessage()               {}
func (*ReqHeightByTitle) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{40} }

func (m *ReqHeightByTitle) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ReqHeightByTitle) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ReqHeightByTitle) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ReqHeightByTitle) GetDirection() int32 {
	if m != nil {
		return m.Direction
	}
	return 0
}

type ReplyHeightByTitle struct {
	Title string       `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Items []*BlockInfo `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
}

func (m *ReplyHeightByTitle) Reset()                    { *m = ReplyHeightByTitle{} }
func (m *ReplyHeightByTitle) String() string            { return proto.CompactTextString(m) }
func (*ReplyHeightByTitle) ProtoMessage()               {}
func (*ReplyHeightByTitle) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{41} }

func (m *ReplyHeightByTitle) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ReplyHeightByTitle) GetItems() []*BlockInfo {
	if m != nil {
		return m.Items
	}
	return nil
}

// title平行链交易所在主链区块的信息
type BlockInfo struct {
	Height int64  `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	Hash   []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *BlockInfo) Reset()                    { *m = BlockInfo{} }
func (m *BlockInfo) String() string            { return proto.CompactTextString(m) }
func (*BlockInfo) ProtoMessage()               {}
func (*BlockInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{42} }

func (m *BlockInfo) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BlockInfo) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

// 通过高度列表和title获取平行链交易
type ReqParaTxByHeight struct {
	Items []int64 `protobuf:"varint,1,rep,packed,name=items" json:"items,omitempty"`
	Title string  `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
}

func (m *ReqParaTxByHeight) Reset()                    { *m = ReqParaTxByHeight{} }
func (m *ReqParaTxByHeight) String() string            { return proto.CompactTextString(m) }
func (*ReqParaTxByHeight) ProtoMessage()               {}
func (*ReqParaTxByHeight) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{43} }

func (m *ReqParaTxByHeight) GetItems() []int64 {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ReqParaTxByHeight) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

// 用于比较最优区块的消息结构
type CmpBlock struct {
	Block   *Block `protobuf:"bytes,1,opt,name=block" json:"block,omitempty"`
	CmpHash []byte `protobuf:"bytes,2,opt,name=cmpHash,proto3" json:"cmpHash,omitempty"`
}

func (m *CmpBlock) Reset()                    { *m = CmpBlock{} }
func (m *CmpBlock) String() string            { return proto.CompactTextString(m) }
func (*CmpBlock) ProtoMessage()               {}
func (*CmpBlock) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{44} }

func (m *CmpBlock) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *CmpBlock) GetCmpHash() []byte {
	if m != nil {
		return m.CmpHash
	}
	return nil
}

// BlockBodys
type BlockBodys struct {
	Items []*BlockBody `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *BlockBodys) Reset()                    { *m = BlockBodys{} }
func (m *BlockBodys) String() string            { return proto.CompactTextString(m) }
func (*BlockBodys) ProtoMessage()               {}
func (*BlockBodys) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{45} }

func (m *BlockBodys) GetItems() []*BlockBody {
	if m != nil {
		return m.Items
	}
	return nil
}

// ChunkRecords
type ChunkRecords struct {
	Kvs []*KeyValue `protobuf:"bytes,1,rep,name=kvs" json:"kvs,omitempty"`
}

func (m *ChunkRecords) Reset()                    { *m = ChunkRecords{} }
func (m *ChunkRecords) String() string            { return proto.CompactTextString(m) }
func (*ChunkRecords) ProtoMessage()               {}
func (*ChunkRecords) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{46} }

func (m *ChunkRecords) GetKvs() []*KeyValue {
	if m != nil {
		return m.Kvs
	}
	return nil
}

// ChunkBlocks ----> reply Blocks 主要用于同步数据
type ReqChunkBlock struct {
	ChunkHash []byte `protobuf:"bytes,1,opt,name=chunkHash,proto3" json:"chunkHash,omitempty"`
	Start     int64  `protobuf:"varint,2,opt,name=start" json:"start,omitempty"`
	End       int64  `protobuf:"varint,3,opt,name=end" json:"end,omitempty"`
}

func (m *ReqChunkBlock) Reset()                    { *m = ReqChunkBlock{} }
func (m *ReqChunkBlock) String() string            { return proto.CompactTextString(m) }
func (*ReqChunkBlock) ProtoMessage()               {}
func (*ReqChunkBlock) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{47} }

func (m *ReqChunkBlock) GetChunkHash() []byte {
	if m != nil {
		return m.ChunkHash
	}
	return nil
}

func (m *ReqChunkBlock) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *ReqChunkBlock) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

// ChunkBlockBodys ----> reply BlockBodys 主要用于查询数据
type ReqChunkBlockBody struct {
	ChunkHash []byte `protobuf:"bytes,1,opt,name=chunkHash,proto3" json:"chunkHash,omitempty"`
	Filter    bool   `protobuf:"varint,2,opt,name=filter" json:"filter,omitempty"`
	Start     int64  `protobuf:"varint,3,opt,name=start" json:"start,omitempty"`
	End       int64  `protobuf:"varint,4,opt,name=end" json:"end,omitempty"`
}

func (m *ReqChunkBlockBody) Reset()                    { *m = ReqChunkBlockBody{} }
func (m *ReqChunkBlockBody) String() string            { return proto.CompactTextString(m) }
func (*ReqChunkBlockBody) ProtoMessage()               {}
func (*ReqChunkBlockBody) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{48} }

func (m *ReqChunkBlockBody) GetChunkHash() []byte {
	if m != nil {
		return m.ChunkHash
	}
	return nil
}

func (m *ReqChunkBlockBody) GetFilter() bool {
	if m != nil {
		return m.Filter
	}
	return false
}

func (m *ReqChunkBlockBody) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *ReqChunkBlockBody) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

// ChunkInfo用于记录chunk的信息
type ChunkInfo struct {
	ChunkNum  int64  `protobuf:"varint,1,opt,name=chunkNum" json:"chunkNum,omitempty"`
	ChunkHash []byte `protobuf:"bytes,2,opt,name=chunkHash,proto3" json:"chunkHash,omitempty"`
	Start     int64  `protobuf:"varint,3,opt,name=start" json:"start,omitempty"`
	End       int64  `protobuf:"varint,4,opt,name=end" json:"end,omitempty"`
}

func (m *ChunkInfo) Reset()                    { *m = ChunkInfo{} }
func (m *ChunkInfo) String() string            { return proto.CompactTextString(m) }
func (*ChunkInfo) ProtoMessage()               {}
func (*ChunkInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{49} }

func (m *ChunkInfo) GetChunkNum() int64 {
	if m != nil {
		return m.ChunkNum
	}
	return 0
}

func (m *ChunkInfo) GetChunkHash() []byte {
	if m != nil {
		return m.ChunkHash
	}
	return nil
}

func (m *ChunkInfo) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *ChunkInfo) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

// 获取ChunkRecord信息
// 	 start : 获取Chunk的开始高度
// 	 end :获取Chunk的结束高度
// 	 Isdetail : 是否需要获取所有Chunk Record 信息，false时候获取到chunkNum--->chunkhash的KV对，true获取全部
// 	 pid : peer列表
type ReqChunkRecords struct {
	Start    int64    `protobuf:"varint,1,opt,name=start" json:"start,omitempty"`
	End      int64    `protobuf:"varint,2,opt,name=end" json:"end,omitempty"`
	IsDetail bool     `protobuf:"varint,3,opt,name=isDetail" json:"isDetail,omitempty"`
	Pid      []string `protobuf:"bytes,4,rep,name=pid" json:"pid,omitempty"`
}

func (m *ReqChunkRecords) Reset()                    { *m = ReqChunkRecords{} }
func (m *ReqChunkRecords) String() string            { return proto.CompactTextString(m) }
func (*ReqChunkRecords) ProtoMessage()               {}
func (*ReqChunkRecords) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{50} }

func (m *ReqChunkRecords) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *ReqChunkRecords) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *ReqChunkRecords) GetIsDetail() bool {
	if m != nil {
		return m.IsDetail
	}
	return false
}

func (m *ReqChunkRecords) GetPid() []string {
	if m != nil {
		return m.Pid
	}
	return nil
}

func init() {
	proto.RegisterType((*Header)(nil), "types.Header")
	proto.RegisterType((*Block)(nil), "types.Block")
	proto.RegisterType((*Blocks)(nil), "types.Blocks")
	proto.RegisterType((*BlockSeqCB)(nil), "types.BlockSeqCB")
	proto.RegisterType((*BlockSeqCBs)(nil), "types.BlockSeqCBs")
	proto.RegisterType((*BlockSeq)(nil), "types.BlockSeq")
	proto.RegisterType((*BlockSeqs)(nil), "types.BlockSeqs")
	proto.RegisterType((*BlockPid)(nil), "types.BlockPid")
	proto.RegisterType((*BlockDetails)(nil), "types.BlockDetails")
	proto.RegisterType((*Headers)(nil), "types.Headers")
	proto.RegisterType((*HeadersPid)(nil), "types.HeadersPid")
	proto.RegisterType((*BlockOverview)(nil), "types.BlockOverview")
	proto.RegisterType((*BlockDetail)(nil), "types.BlockDetail")
	proto.RegisterType((*Receipts)(nil), "types.Receipts")
	proto.RegisterType((*ReceiptCheckTxList)(nil), "types.ReceiptCheckTxList")
	proto.RegisterType((*ChainStatus)(nil), "types.ChainStatus")
	proto.RegisterType((*ReqBlocks)(nil), "types.ReqBlocks")
	proto.RegisterType((*MempoolSize)(nil), "types.MempoolSize")
	proto.RegisterType((*ReplyBlockHeight)(nil), "types.ReplyBlockHeight")
	proto.RegisterType((*BlockBody)(nil), "types.BlockBody")
	proto.RegisterType((*BlockReceipt)(nil), "types.BlockReceipt")
	proto.RegisterType((*IsCaughtUp)(nil), "types.IsCaughtUp")
	proto.RegisterType((*IsNtpClockSync)(nil), "types.IsNtpClockSync")
	proto.RegisterType((*ChainExecutor)(nil), "types.ChainExecutor")
	proto.RegisterType((*BlockSequence)(nil), "types.BlockSequence")
	proto.RegisterType((*BlockSequences)(nil), "types.BlockSequences")
	proto.RegisterType((*Sequence)(nil), "types.Sequence")
	proto.RegisterType((*ReplyAddSeqCallback)(nil), "types.ReplyAddSeqCallback")
	proto.RegisterType((*ParaChainBlockDetail)(nil), "types.ParaChainBlockDetail")
	proto.RegisterType((*ParaTxDetails)(nil), "types.ParaTxDetails")
	proto.RegisterType((*ParaTxDetail)(nil), "types.ParaTxDetail")
	proto.RegisterType((*TxDetail)(nil), "types.TxDetail")
	proto.RegisterType((*ReqParaTxByTitle)(nil), "types.ReqParaTxByTitle")
	proto.RegisterType((*FileHeader)(nil), "types.FileHeader")
	proto.RegisterType((*EndBlock)(nil), "types.EndBlock")
	proto.RegisterType((*HeaderSeq)(nil), "types.HeaderSeq")
	proto.RegisterType((*HeaderSeqs)(nil), "types.HeaderSeqs")
	proto.RegisterType((*HeightPara)(nil), "types.HeightPara")
	proto.RegisterType((*HeightParas)(nil), "types.HeightParas")
	proto.RegisterType((*ChildChain)(nil), "types.ChildChain")
	proto.RegisterType((*ReqHeightByTitle)(nil), "types.ReqHeightByTitle")
	proto.RegisterType((*ReplyHeightByTitle)(nil), "types.ReplyHeightByTitle")
	proto.RegisterType((*BlockInfo)(nil), "types.BlockInfo")
	proto.RegisterType((*ReqParaTxByHeight)(nil), "types.ReqParaTxByHeight")
	proto.RegisterType((*CmpBlock)(nil), "types.CmpBlock")
	proto.RegisterType((*BlockBodys)(nil), "types.BlockBodys")
	proto.RegisterType((*ChunkRecords)(nil), "types.ChunkRecords")
	proto.RegisterType((*ReqChunkBlock)(nil), "types.ReqChunkBlock")
	proto.RegisterType((*ReqChunkBlockBody)(nil), "types.ReqChunkBlockBody")
	proto.RegisterType((*ChunkInfo)(nil), "types.ChunkInfo")
	proto.RegisterType((*ReqChunkRecords)(nil), "types.ReqChunkRecords")
}

func init() { proto.RegisterFile("blockchain.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 1762 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x58, 0x5f, 0x6f, 0x23, 0x49,
	0x11, 0xd7, 0xcc, 0xd8, 0x8e, 0x5d, 0x8e, 0x73, 0xd9, 0xbe, 0xe8, 0x64, 0x45, 0x70, 0x97, 0x6d,
	0x96, 0x25, 0xac, 0x96, 0x2c, 0x6c, 0x4e, 0x77, 0x27, 0x84, 0x04, 0xc4, 0x7b, 0x28, 0xd1, 0x1e,
	0x7b, 0xc7, 0x24, 0xbb, 0x0f, 0x3c, 0x31, 0x3b, 0x6e, 0xc7, 0x43, 0xec, 0x99, 0xf1, 0x74, 0x4f,
	0xb0, 0xef, 0x89, 0x67, 0x24, 0xbe, 0x08, 0xe2, 0x63, 0xf0, 0xc2, 0x0b, 0xe2, 0x1b, 0xf0, 0x55,
	0x50, 0x55, 0x77, 0xcf, 0xf4, 0x38, 0x4e, 0x76, 0x23, 0xc4, 0xc3, 0xbd, 0x75, 0x55, 0x57, 0x77,
	0xfd, 0xed, 0x5f, 0xd5, 0x0c, 0xec, 0xbe, 0x9d, 0x65, 0xf1, 0x55, 0x3c, 0x8d, 0x92, 0xf4, 0x28,
	0x2f, 0x32, 0x95, 0xb1, 0xb6, 0x5a, 0xe5, 0x42, 0xee, 0x3f, 0x50, 0x45, 0x94, 0xca, 0x28, 0x56,
	0x49, 0x66, 0x76, 0xf6, 0xb7, 0xe3, 0x6c, 0x3e, 0xb7, 0x14, 0xff, 0xbb, 0x0f, 0x9d, 0x53, 0x11,
	0x8d, 0x45, 0xc1, 0x86, 0xb0, 0x75, 0x2d, 0x0a, 0x99, 0x64, 0xe9, 0xd0, 0x3b, 0xf0, 0x0e, 0x83,
	0xd0, 0x92, 0xec, 0x63, 0x80, 0x3c, 0x2a, 0x44, 0xaa, 0x4e, 0x23, 0x39, 0x1d, 0xfa, 0x07, 0xde,
	0xe1, 0x76, 0xe8, 0x70, 0xd8, 0x47, 0xd0, 0x51, 0x4b, 0xda, 0x0b, 0x68, 0xcf, 0x50, 0xec, 0x7b,
	0xd0, 0x93, 0x2a, 0x52, 0x82, 0xb6, 0x5a, 0xb4, 0x55, 0x33, 0xf0, 0xd4, 0x54, 0x24, 0x97, 0x53,
	0x35, 0x6c, 0x93, 0x3a, 0x43, 0xe1, 0x29, 0x72, 0xe7, 0x22, 0x99, 0x8b, 0x61, 0x87, 0xb6, 0x6a,
	0x06, 0x5a, 0xa9, 0x96, 0xa3, 0xac, 0x4c, 0xd5, 0xb0, 0xa7, 0xad, 0x34, 0x24, 0x63, 0xd0, 0x9a,
	0xa2, 0x22, 0x20, 0x45, 0xb4, 0x46, 0xcb, 0xc7, 0xc9, 0x64, 0x92, 0xc4, 0xe5, 0x4c, 0xad, 0x86,
	0xfd, 0x03, 0xef, 0x70, 0x10, 0x3a, 0x1c, 0x76, 0x04, 0x3d, 0x99, 0x5c, 0xa6, 0x91, 0x2a, 0x0b,
	0x31, 0xec, 0x1e, 0x78, 0x87, 0xfd, 0xe7, 0xbb, 0x47, 0x14, 0xba, 0xa3, 0x73, 0xcb, 0x0f, 0x6b,
	0x11, 0xfe, 0x1f, 0x1f, 0xda, 0x27, 0x68, 0xcb, 0x77, 0x24, 0x5a, 0xef, 0xf2, 0x7f, 0x1f, 0xba,
	0xf3, 0x28, 0x49, 0x49, 0xe5, 0x36, 0xa9, 0xac, 0x68, 0x3c, 0x4b, 0x6b, 0xad, 0x75, 0x40, 0x57,
	0x3b, 0x9c, 0xfb, 0xc6, 0x8e, 0x3d, 0x82, 0x40, 0x2d, 0xe5, 0x70, 0xeb, 0x20, 0x38, 0xec, 0x3f,
	0x67, 0x46, 0xf2, 0xa2, 0xae, 0xcf, 0x10, 0xb7, 0xf9, 0x53, 0xe8, 0x50, 0x80, 0x25, 0xe3, 0xd0,
	0x4e, 0x94, 0x98, 0xcb, 0xa1, 0x47, 0x27, 0xb6, 0xcd, 0x09, 0xda, 0x0d, 0xf5, 0x16, 0xff, 0xb7,
	0x07, 0x40, 0x8c, 0x73, 0xb1, 0x18, 0x9d, 0x60, 0x09, 0xa4, 0xd1, 0x5c, 0x50, 0x46, 0x7a, 0x21,
	0xad, 0xd9, 0x2e, 0x04, 0xaf, 0xc3, 0xaf, 0x28, 0x0f, 0xbd, 0x10, 0x97, 0x18, 0x4a, 0x91, 0xc6,
	0xd9, 0x58, 0x50, 0x02, 0x7a, 0xa1, 0xa1, 0x30, 0x18, 0x89, 0xd4, 0x8f, 0x81, 0xe2, 0xdf, 0x0d,
	0x2b, 0x9a, 0x71, 0xd8, 0x9e, 0x45, 0x52, 0x9d, 0x8b, 0x45, 0x29, 0xd2, 0x58, 0x98, 0x24, 0x34,
	0x78, 0x18, 0x30, 0xa4, 0x4d, 0xc0, 0x74, 0x2e, 0x1c, 0x0e, 0x7b, 0x04, 0x03, 0xa4, 0xc8, 0x5e,
	0x8a, 0xf8, 0x16, 0xa9, 0x6f, 0x32, 0xf9, 0x67, 0xd0, 0xaf, 0x3d, 0x92, 0xec, 0x47, 0xcd, 0x28,
	0x3c, 0x70, 0xa3, 0x40, 0x22, 0x36, 0x14, 0x39, 0x74, 0x2d, 0x13, 0x7d, 0x4e, 0xcb, 0xb9, 0x29,
	0x4c, 0x5c, 0xb2, 0xc7, 0x10, 0x48, 0xb1, 0xa0, 0x28, 0xf4, 0x9f, 0xef, 0xad, 0x5d, 0x42, 0xe6,
	0x87, 0x28, 0xc0, 0x9e, 0x40, 0x67, 0x2c, 0x54, 0x94, 0xcc, 0x28, 0x36, 0x75, 0x9e, 0x48, 0xf4,
	0x05, 0xed, 0x84, 0x46, 0x82, 0xff, 0x14, 0x7a, 0xf6, 0x06, 0xc9, 0x7e, 0x00, 0x2d, 0x29, 0x16,
	0xd6, 0xcc, 0x0f, 0xd6, 0x34, 0x84, 0xb4, 0xc9, 0x7f, 0x65, 0x6c, 0xfc, 0x26, 0x19, 0xa3, 0x8d,
	0x79, 0x32, 0x36, 0xa9, 0xc2, 0x25, 0x26, 0x9c, 0x2a, 0xd7, 0x58, 0xb9, 0x96, 0x70, 0xda, 0xe2,
	0x5f, 0xc0, 0xb6, 0x63, 0x8a, 0x64, 0x87, 0xcd, 0xf0, 0x6c, 0x32, 0xd7, 0xc4, 0xe7, 0x08, 0xb6,
	0x74, 0x2e, 0xd1, 0xd6, 0xc6, 0xa1, 0x81, 0x39, 0xa4, 0xb7, 0xad, 0xfc, 0x29, 0x80, 0x91, 0xdf,
	0x6c, 0xed, 0x21, 0x6c, 0x4d, 0xf5, 0xbe, 0xb1, 0x77, 0xa7, 0x71, 0x8d, 0x0c, 0xed, 0x36, 0x9f,
	0xc2, 0x80, 0xec, 0xf9, 0xfa, 0x5a, 0x14, 0xd7, 0x89, 0xf8, 0x13, 0x7b, 0x08, 0x2d, 0xdc, 0xa3,
	0xdb, 0x6e, 0xa8, 0xa7, 0x2d, 0x17, 0xe6, 0xfc, 0x26, 0xcc, 0xed, 0x43, 0x57, 0x03, 0x86, 0x90,
	0xc3, 0xe0, 0x20, 0xc0, 0x27, 0x6b, 0x69, 0xfe, 0x37, 0xcf, 0x14, 0x8f, 0x76, 0xbd, 0x8e, 0xa8,
	0x77, 0x6b, 0x44, 0xd9, 0x11, 0x74, 0x0b, 0x11, 0x8b, 0x24, 0x57, 0xe8, 0x88, 0x1b, 0xc4, 0x50,
	0xb3, 0x5f, 0x44, 0x2a, 0x0a, 0x2b, 0x19, 0xf6, 0x09, 0xf8, 0x2f, 0xdf, 0x90, 0xe6, 0x3a, 0xcd,
	0x2f, 0xc5, 0xea, 0x4d, 0x34, 0x2b, 0x45, 0xe8, 0xbf, 0x7c, 0xc3, 0x1e, 0xc3, 0x4e, 0x5e, 0x88,
	0xeb, 0x73, 0x15, 0xa9, 0x52, 0x3a, 0x60, 0xb6, 0xc6, 0xe5, 0x9f, 0x41, 0x37, 0xb4, 0x97, 0x3e,
	0x71, 0x8c, 0xd0, 0x49, 0xd9, 0x69, 0x1a, 0x51, 0x1b, 0xc0, 0x0f, 0x81, 0x19, 0xe6, 0x68, 0x2a,
	0xe2, 0xab, 0x8b, 0xe5, 0x57, 0x89, 0x24, 0xf4, 0x17, 0x45, 0xa1, 0x4f, 0xf7, 0x42, 0x5a, 0xf3,
	0x15, 0xf4, 0x47, 0xd8, 0x13, 0xb5, 0x52, 0x7c, 0x7f, 0x71, 0x59, 0x10, 0x0e, 0xeb, 0x27, 0xaa,
	0xdf, 0x47, 0x93, 0xc9, 0x0e, 0xa0, 0x3f, 0x17, 0xf3, 0x3c, 0xcb, 0x66, 0xe7, 0xc9, 0xb7, 0xc2,
	0x44, 0xdf, 0x65, 0x21, 0x16, 0xcc, 0xe5, 0xe5, 0xef, 0x4a, 0x51, 0x0a, 0x12, 0x09, 0x34, 0x16,
	0xb8, 0x3c, 0x1e, 0x41, 0x2f, 0x14, 0x0b, 0x83, 0x64, 0x7b, 0xd0, 0x96, 0x2a, 0x2a, 0xac, 0x42,
	0x4d, 0x60, 0x49, 0x89, 0x74, 0x6c, 0x14, 0xe0, 0x52, 0x03, 0xd0, 0x8b, 0xfa, 0xf9, 0x11, 0x00,
	0x99, 0x54, 0x9a, 0x02, 0x6c, 0x91, 0x7b, 0xb8, 0xe4, 0x0f, 0xa1, 0xff, 0x5b, 0xc7, 0x2a, 0x06,
	0x2d, 0x89, 0xd6, 0x68, 0x1d, 0xb4, 0xe6, 0x4f, 0x60, 0x37, 0x14, 0xf9, 0x6c, 0xa5, 0xd1, 0x45,
	0xfb, 0x57, 0x37, 0x12, 0xcf, 0x6d, 0x24, 0xfc, 0x9f, 0x9e, 0x79, 0xce, 0x27, 0xd9, 0x78, 0x65,
	0xc1, 0xda, 0xbb, 0x13, 0xac, 0xef, 0x5d, 0x3b, 0x6e, 0xbb, 0x09, 0xee, 0x6c, 0x37, 0xad, 0x1b,
	0xed, 0xc6, 0xb6, 0xf7, 0xb6, 0xd3, 0xde, 0x6b, 0x5f, 0x3a, 0x0d, 0x5f, 0xfe, 0x68, 0x50, 0xc2,
	0x58, 0xd1, 0xb0, 0xd3, 0x7b, 0x0f, 0x3b, 0xad, 0x2e, 0x7f, 0xa3, 0xae, 0xa0, 0xa1, 0xeb, 0x29,
	0xc0, 0x99, 0x1c, 0x45, 0xe5, 0xe5, 0x54, 0xbd, 0xce, 0xd1, 0x8b, 0x33, 0x19, 0x13, 0x55, 0xe6,
	0x14, 0xe1, 0x6e, 0xe8, 0x70, 0xf8, 0x17, 0xb0, 0x73, 0x26, 0x5f, 0xa9, 0x7c, 0x44, 0xc0, 0xb8,
	0x4a, 0x63, 0x7c, 0x2e, 0x89, 0x4c, 0x55, 0x1e, 0x53, 0xad, 0xac, 0xd2, 0xd8, 0x9c, 0x5a, 0xe3,
	0xf2, 0xbf, 0x7a, 0x30, 0xa0, 0x6a, 0xfe, 0x72, 0x29, 0xe2, 0x52, 0x65, 0x05, 0x5a, 0x34, 0x2e,
	0x92, 0x6b, 0x51, 0x18, 0x58, 0x32, 0x14, 0x46, 0x79, 0x52, 0xa6, 0xf1, 0x2b, 0xec, 0x84, 0xba,
	0xed, 0x55, 0x74, 0x73, 0xc8, 0x08, 0xd6, 0x87, 0x8c, 0x3d, 0x68, 0xe7, 0x51, 0x11, 0xcd, 0xcd,
	0x8b, 0xd5, 0x04, 0x72, 0xc5, 0x52, 0x15, 0x91, 0x09, 0xbd, 0x26, 0xf8, 0xe7, 0x06, 0xd5, 0xaa,
	0xf6, 0xc7, 0xa0, 0x45, 0xb7, 0x7a, 0x3a, 0x68, 0x74, 0x21, 0x83, 0xd6, 0xc5, 0x2a, 0xb7, 0xaf,
	0x88, 0xd6, 0xfc, 0x17, 0xb0, 0xd3, 0x38, 0x88, 0xaf, 0xbf, 0x81, 0xc7, 0x9b, 0xdb, 0x93, 0x81,
	0xe5, 0x09, 0x74, 0xef, 0xab, 0x11, 0x03, 0x22, 0x6d, 0xe3, 0xd6, 0xc9, 0xab, 0x68, 0x27, 0xad,
	0xad, 0x46, 0x5a, 0xff, 0x00, 0x1f, 0xd2, 0xd3, 0xf9, 0xf5, 0x78, 0x8c, 0x6d, 0x36, 0x9a, 0xcd,
	0xde, 0x46, 0xf1, 0x15, 0x5e, 0x9f, 0xc8, 0xaf, 0xaf, 0x4c, 0x8e, 0x68, 0x8d, 0x4f, 0x73, 0x2e,
	0x2f, 0x4d, 0xb1, 0xe0, 0xb2, 0x6a, 0x86, 0x4d, 0x94, 0xac, 0x5c, 0xd1, 0xcd, 0xf0, 0xcf, 0x1e,
	0xec, 0x7d, 0x13, 0x15, 0x11, 0x25, 0xd5, 0x45, 0xed, 0x4f, 0xa1, 0x4f, 0xd0, 0x6c, 0x1a, 0xb1,
	0x77, 0x6b, 0x23, 0x76, 0xc5, 0x1a, 0x4e, 0xfa, 0x37, 0x9d, 0x4c, 0x24, 0x56, 0x9b, 0x81, 0x15,
	0x43, 0xf1, 0x9f, 0xc3, 0x00, 0x2d, 0xb8, 0x58, 0xda, 0x76, 0xfa, 0xe3, 0x66, 0x26, 0x3e, 0x34,
	0x4a, 0x5d, 0x21, 0x9b, 0x88, 0x7f, 0x78, 0xb0, 0xed, 0xf2, 0x31, 0x34, 0x28, 0x6d, 0x01, 0x08,
	0xd7, 0xec, 0x87, 0x18, 0x5d, 0x1a, 0xa8, 0xfc, 0x4d, 0xbd, 0xce, 0x6c, 0xb2, 0x9f, 0x40, 0x4f,
	0x59, 0x1b, 0xd6, 0x82, 0x56, 0xa9, 0xad, 0x25, 0xb0, 0x88, 0xe3, 0x69, 0x32, 0x1b, 0xbb, 0x93,
	0x72, 0xc5, 0xc0, 0x72, 0x4d, 0xd2, 0xb1, 0x58, 0x52, 0xb9, 0x0e, 0x42, 0x4d, 0x60, 0x08, 0xf2,
	0x22, 0xcb, 0x26, 0x72, 0xd8, 0xa1, 0xa6, 0x69, 0x28, 0xfe, 0x17, 0x0f, 0xba, 0x95, 0x0b, 0xd5,
	0x51, 0xcf, 0x3d, 0xca, 0xc1, 0x57, 0x4b, 0xe3, 0xc0, 0x26, 0x28, 0xf4, 0xd5, 0x92, 0x3d, 0x85,
	0x2d, 0x83, 0x1e, 0x6b, 0x83, 0x93, 0x0b, 0x30, 0x56, 0xc4, 0x31, 0xa6, 0xd5, 0x30, 0x66, 0x82,
	0x78, 0xbd, 0xd0, 0x51, 0x3d, 0x59, 0x5d, 0x24, 0x6a, 0x26, 0xde, 0xbb, 0x79, 0xec, 0x41, 0x5b,
	0xe1, 0x01, 0x33, 0xd4, 0x6a, 0x82, 0x3c, 0x92, 0xe7, 0x62, 0x61, 0x06, 0x5a, 0x4d, 0xf0, 0x6b,
	0x80, 0xdf, 0x24, 0x33, 0x61, 0x66, 0xdb, 0x03, 0xe8, 0xd3, 0xa5, 0x8d, 0xae, 0xe8, 0xb2, 0x1c,
	0xa4, 0xf1, 0x1b, 0x48, 0xb3, 0x59, 0x27, 0xce, 0x2e, 0x42, 0xaa, 0x57, 0x42, 0x19, 0xad, 0x96,
	0xc4, 0x96, 0xff, 0x65, 0x3a, 0xd6, 0x1f, 0x50, 0xb7, 0xf4, 0xa1, 0x4d, 0xd8, 0xcb, 0x67, 0xd0,
	0xd3, 0xb6, 0xfe, 0x6f, 0xc3, 0x6d, 0x5d, 0x8d, 0xc1, 0x1d, 0xd5, 0xc8, 0x9f, 0xdb, 0xc9, 0x8f,
	0x06, 0xdb, 0x47, 0x8d, 0xc1, 0x76, 0xb7, 0x71, 0xa4, 0x9e, 0x6c, 0xff, 0xe5, 0xe1, 0x21, 0x74,
	0x00, 0xb3, 0x77, 0xab, 0x73, 0x55, 0xc0, 0x7c, 0x37, 0x60, 0xd6, 0xe5, 0xc0, 0x69, 0x37, 0x77,
	0xd7, 0xf8, 0xc7, 0x00, 0x94, 0x9f, 0xb3, 0xaa, 0xd0, 0xdb, 0xa1, 0xc3, 0xc1, 0xa6, 0x52, 0x09,
	0x6b, 0x99, 0x0e, 0x55, 0xf4, 0x1a, 0xd7, 0x1d, 0x33, 0xb7, 0xe8, 0x12, 0x4b, 0xe2, 0x67, 0x48,
	0xed, 0xcf, 0xad, 0x9f, 0x21, 0xb5, 0x88, 0x85, 0x85, 0x6f, 0x01, 0x46, 0xa8, 0x83, 0x50, 0xad,
	0xf6, 0xd7, 0x73, 0xfd, 0x6d, 0x5a, 0xef, 0xdf, 0xb0, 0xbe, 0xe1, 0x7b, 0xb0, 0xee, 0xbb, 0x63,
	0x73, 0xab, 0x69, 0xb3, 0xa2, 0xe7, 0xa3, 0x6d, 0xb2, 0xcf, 0xe7, 0x7e, 0x99, 0xd8, 0x83, 0x76,
	0x4c, 0x37, 0x07, 0x74, 0xb3, 0x26, 0xd0, 0x9e, 0x71, 0x52, 0x08, 0x7a, 0xed, 0x46, 0x67, 0xcd,
	0xe0, 0x21, 0xce, 0xa3, 0xf9, 0x6c, 0xd5, 0xd4, 0xbb, 0xd9, 0xf3, 0xc7, 0x36, 0x8c, 0x7e, 0xa3,
	0x9a, 0xa8, 0x56, 0xcf, 0xd2, 0x49, 0x66, 0xa3, 0xf8, 0xb9, 0x99, 0xc5, 0x90, 0x77, 0xaf, 0x97,
	0xf2, 0x4b, 0x78, 0xe0, 0x20, 0xc8, 0x69, 0xe5, 0x6b, 0x9d, 0xbc, 0xc0, 0xe8, 0xd8, 0x1c, 0x01,
	0x7e, 0x0a, 0xdd, 0xd1, 0x3c, 0xd7, 0x4f, 0xf4, 0x7d, 0x3e, 0x1f, 0x86, 0xb0, 0x15, 0xcf, 0x73,
	0xe7, 0x57, 0x87, 0x25, 0xf9, 0xa7, 0xe6, 0xd3, 0x1c, 0xe7, 0x49, 0x59, 0x7b, 0xee, 0xdd, 0xf4,
	0x1c, 0x25, 0xac, 0xe7, 0x3f, 0x83, 0xed, 0xd1, 0xb4, 0x4c, 0x71, 0x74, 0xcb, 0x8a, 0xb1, 0x64,
	0x0f, 0x21, 0xb8, 0xba, 0x5e, 0xff, 0xac, 0xac, 0xbe, 0x37, 0x70, 0x8f, 0xbf, 0x86, 0x41, 0x28,
	0x16, 0x74, 0x4a, 0xdb, 0x4d, 0xf5, 0x53, 0xa6, 0x57, 0xce, 0x70, 0x50, 0x33, 0x6a, 0x40, 0xf5,
	0x37, 0x00, 0x6a, 0x50, 0x01, 0x2a, 0x5f, 0x50, 0x28, 0xeb, 0x6b, 0x69, 0x2e, 0xbe, 0xfb, 0xea,
	0x8f, 0xa0, 0x33, 0x49, 0x66, 0xca, 0xe0, 0x64, 0x37, 0x34, 0x54, 0xad, 0x32, 0xd8, 0xa0, 0xb2,
	0x55, 0xab, 0x9c, 0x43, 0x8f, 0xf4, 0x51, 0xda, 0xf7, 0xa1, 0x4b, 0x37, 0xbf, 0xaa, 0xc0, 0xae,
	0xa2, 0x9b, 0x66, 0xf8, 0xb7, 0x7a, 0xf8, 0x0e, 0x75, 0x97, 0xf0, 0x81, 0xf5, 0xd0, 0x86, 0xfb,
	0xff, 0xf2, 0xa9, 0x72, 0xf2, 0xc9, 0xef, 0xbf, 0x7f, 0x99, 0xa8, 0x69, 0xf9, 0xf6, 0x28, 0xce,
	0xe6, 0xcf, 0x8e, 0x8f, 0xe3, 0xf4, 0x19, 0xfd, 0xac, 0x3c, 0x3e, 0x7e, 0x46, 0x09, 0x7d, 0xdb,
	0xa1, 0xbf, 0x91, 0xc7, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x9c, 0x6d, 0x7b, 0x64, 0xc9, 0x14,
	0x00, 0x00,
}
